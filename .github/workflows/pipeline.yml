name: Secure Node.js Pipeline

on:
  push:
    branches:  # Trigger on push to any branch
      - '**'
  pull_request:
    branches:  # Trigger on pull request to any branch
      - '**'

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install  # Install all dependencies, including dev dependencies

      - name: Run ESLint
        run: npm run lint

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          fail-on-find: true

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'MEDIUM'

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install  # Install all dependencies, including test dependencies

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Check Test Coverage
        run: npm run coverage

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}          # JFrog instance URL
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}  # JFrog access token

      - name: Test Artifactory Connection
        run: |
          jf rt curl -XGET /api/system/version

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          registry: trial6zcfzf.jfrog.io
          username: luckyosakpolorisibor@gmail.com # JFrog username
          password: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Docker Image
        env:
          IMAGE_NAME: trial6zcfzf.jfrog.io/artifactory/hostelworld-docker-local/jfrog-docker-example-image:${{ github.run_number }}  # Image name and tag
        run: |
          # Build the Docker image and tag it
          jf docker build -t $IMAGE_NAME .

      - name: Validate Docker Build
        run: |
          docker images

      - name: Push Docker Image and Publish Build Info
        env:
          IMAGE_NAME: trial6zcfzf.jfrog.io/artifactory/hostelworld-docker-local/jfrog-docker-example-image:${{ github.run_number }}  # Image name and tag
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example  # Build name (static value)
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}  # Build number (dynamic value)
        run: |
          # Push the Docker image to JFrog Artifactory
          jf docker push $IMAGE_NAME

          # Collect environment variables for the build
          jf rt build-collect-env

          # Collect VCS details from Git and add them to the build
          jf rt build-add-git

          # Publish build info to JFrog Artifactory
          jf rt build-publish

      - name: Clean Up Docker Images
        run: |
          docker rmi $IMAGE_NAME

  deploy:
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd ~/secure-node-demo/hostelworld
            bash deploy.sh

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            curl -I http://localhost:3000